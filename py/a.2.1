import pandas as pd
import numpy as np
from sklearn.experimental import enable_iterative_imputer
from sklearn.impute import IterativeImputer
from category_encoders import TargetEncoder
from statsmodels.stats.outliers_influence import variance_inflation_factor
import statsmodels.api as sm
import shap
import matplotlib.pyplot as plt
import seaborn as sns

# 1) 데이터 로드 및 전처리
df = pd.read_csv('train.csv').drop('Id', axis=1)
num = df.select_dtypes(include='number').columns.drop('SalePrice')
cat = df.select_dtypes(exclude='number').columns

imp = IterativeImputer(random_state=0)
df[num] = imp.fit_transform(df[num])
df[cat] = df[cat].fillna(df[cat].mode().iloc[0])
df['RemodelAge'] = df['YearRemodAdd'] - df['YearBuilt']
df['TotalSF'] = df['GrLivArea'] + df['TotalBsmtSF']

te = TargetEncoder()
df[cat] = te.fit_transform(df[cat], df['SalePrice'])

# 2) VIF 기반 변수 선택
X = sm.add_constant(df.drop('SalePrice', axis=1))
vif = pd.Series([variance_inflation_factor(X.values, i) 
                 for i in range(X.shape[1])], index=X.columns)
sel = vif[vif < 5].index.tolist()
X_sel = X[sel]
y = df['SalePrice']

# 3) OLS 회귀모델 적합
model = sm.OLS(y, X_sel).fit(alpha=0.01)
print(model.summary())

# 4) 진단 플롯
fig = plt.figure(figsize=(12,8))
sm.graphics.plot_partregress_grid(model, fig=fig)
plt.show()

sm.qqplot(model.resid, line='45', fit=True)
plt.show()

plt.scatter(model.fittedvalues, model.resid, alpha=0.5)
plt.axhline(0, color='red')
plt.xlabel('Fitted'); plt.ylabel('Residuals'); plt.show()

# 5) SHAP 값
explainer = shap.LinearExplainer(model, X_sel)
shap_vals = explainer.shap_values(X_sel)
shap.summary_plot(shap_vals, X_sel)
